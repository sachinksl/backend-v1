{"ast":null,"code":"// src/api.js\nexport async function sendPromptToAI(prompt) {\n  try {\n    const response = await fetch('/api/disclosure/ai', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include',\n      body: JSON.stringify({\n        prompt\n      })\n    });\n    if (!response.ok) throw new Error('AI response failed');\n    const data = await response.json();\n    return data.reply; // backend now returns { reply }\n  } catch (error) {\n    console.error(error);\n    return \"Sorry, I'm having trouble responding right now.\";\n  }\n}\nexport async function fetchProgress(token) {\n  try {\n    // Token not required by backend; keep header only if you want it later\n    const response = await fetch('/api/disclosure/progress', {\n      credentials: 'include',\n      headers: token ? {\n        Authorization: `Bearer ${token}`\n      } : {}\n    });\n    if (!response.ok) throw new Error('Progress fetch failed');\n    return await response.json();\n  } catch (error) {\n    console.error(error);\n    return {\n      completed: 0,\n      total: 3\n    };\n  }\n}\nexport async function listProperties() {\n  const r = await fetch('/api/properties', {\n    credentials: 'include'\n  });\n  if (!r.ok) throw new Error('listProperties failed');\n  return r.json();\n}\nexport async function getProperty(id) {\n  const r = await fetch(`/api/properties/${id}`, {\n    credentials: 'include'\n  });\n  if (!r.ok) throw new Error('getProperty failed');\n  return r.json();\n}\nexport async function createProperty(payload) {\n  const r = await fetch('/api/properties', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'include',\n    // important for session cookie\n    body: JSON.stringify(payload)\n  });\n  if (!r.ok) {\n    const t = await r.text().catch(() => '');\n    throw new Error(`createProperty failed: ${r.status} ${t}`);\n  }\n  return r.json();\n}\nexport async function listDocuments(propertyId) {\n  const r = await fetch(`/api/properties/${propertyId}/documents`, {\n    credentials: 'include'\n  });\n  if (!r.ok) throw new Error('listDocuments failed');\n  return r.json();\n}\nexport async function presignUpload(propertyId, {\n  filename,\n  kind,\n  size\n}) {\n  const r = await fetch(`/api/properties/${propertyId}/documents/presign`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'include',\n    body: JSON.stringify({\n      filename,\n      kind,\n      size\n    })\n  });\n  if (!r.ok) throw new Error('presignUpload failed');\n  return r.json(); // { uploadUrl, key, contentType }\n}\nexport async function completeUpload(propertyId, {\n  key,\n  filename,\n  kind,\n  sha256\n}) {\n  const r = await fetch(`/api/properties/${propertyId}/documents/complete`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'include',\n    body: JSON.stringify({\n      key,\n      filename,\n      kind,\n      sha256\n    })\n  });\n  if (!r.ok) throw new Error('completeUpload failed');\n  return r.json();\n}\nexport async function getDashboardSummary() {\n  const r = await fetch('/api/dashboard/summary', {\n    credentials: 'include'\n  });\n  if (!r.ok) throw new Error('dashboard summary failed');\n  return r.json(); // { properties:[...], totals:{completed,total} }\n}\nexport async function uploadViaProxy(propertyId, file, kind = 'supporting') {\n  const form = new FormData();\n  form.append('file', file);\n  form.append('kind', kind);\n  const r = await fetch(`/api/properties/${propertyId}/upload`, {\n    method: 'POST',\n    credentials: 'include',\n    // ðŸ‘ˆ required or you'll get 401\n    body: form\n  });\n  if (!r.ok) {\n    const t = await r.text().catch(() => '');\n    throw new Error(`Upload failed: ${r.status} ${t}`);\n  }\n  return r.json();\n}\n\n// (optional simple alias if your component imports uploadDocument)\nexport const uploadDocument = uploadViaProxy;\n\n// Get a signed URL to view/download a document\nexport async function getDocumentUrl(propertyId, docId) {\n  const r = await fetch(`/api/properties/${propertyId}/documents/${docId}/url`, {\n    credentials: 'include'\n  });\n  if (!r.ok) throw new Error('getDocumentUrl failed');\n  return r.json(); // -> { url: \"https://...\" }\n}\n\n// Delete a document\nexport async function deleteDocument(propertyId, docId) {\n  const r = await fetch(`/api/properties/${propertyId}/documents/${docId}`, {\n    method: 'DELETE',\n    credentials: 'include'\n  });\n  if (!r.ok) throw new Error('deleteDocument failed');\n  return true;\n}\nexport async function getMe() {\n  const r = await fetch('/api/me', {\n    credentials: 'include'\n  });\n  if (!r.ok) throw new Error(await r.text());\n  return r.json();\n}\nexport async function buildForm2(propertyId) {\n  const r = await fetch(`/api/properties/${propertyId}/form2/build`, {\n    method: 'POST',\n    credentials: 'include'\n  });\n  if (!r.ok) throw new Error(await r.text());\n  return r.json(); // { id, version, pdfKey, ... }\n}\nexport async function getLatestForm2(propertyId) {\n  const r = await fetch(`/api/properties/${propertyId}/form2/latest`, {\n    credentials: 'include'\n  });\n  if (!r.ok) throw new Error(await r.text());\n  return r.json();\n}\nexport async function buildServePack(propertyId) {\n  const r = await fetch(`/api/properties/${propertyId}/serve/build`, {\n    method: 'POST',\n    credentials: 'include'\n  });\n  if (!r.ok) throw new Error(await r.text());\n  return r.json(); // { id, version, zipKey, ... }\n}\nexport async function getLatestServePack(propertyId) {\n  const r = await fetch(`/api/properties/${propertyId}/serve/latest`, {\n    credentials: 'include'\n  });\n  if (!r.ok) throw new Error(await r.text());\n  return r.json();\n}","map":{"version":3,"names":["sendPromptToAI","prompt","response","fetch","method","headers","credentials","body","JSON","stringify","ok","Error","data","json","reply","error","console","fetchProgress","token","Authorization","completed","total","listProperties","r","getProperty","id","createProperty","payload","t","text","catch","status","listDocuments","propertyId","presignUpload","filename","kind","size","completeUpload","key","sha256","getDashboardSummary","uploadViaProxy","file","form","FormData","append","uploadDocument","getDocumentUrl","docId","deleteDocument","getMe","buildForm2","getLatestForm2","buildServePack","getLatestServePack"],"sources":["/Users/sachinkansal/seller-disclosure-portal/src/api.js"],"sourcesContent":["// src/api.js\nexport async function sendPromptToAI(prompt) {\n  try {\n    const response = await fetch('/api/disclosure/ai', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      credentials: 'include',  \n      body: JSON.stringify({ prompt })\n    });\n    if (!response.ok) throw new Error('AI response failed');\n    const data = await response.json();\n    return data.reply; // backend now returns { reply }\n  } catch (error) {\n    console.error(error);\n    return \"Sorry, I'm having trouble responding right now.\";\n  }\n}\n\nexport async function fetchProgress(token) {\n  try {\n    // Token not required by backend; keep header only if you want it later\n    const response = await fetch('/api/disclosure/progress', {\n      credentials: 'include',  \n      headers: token ? { Authorization: `Bearer ${token}` } : {}\n    });\n    if (!response.ok) throw new Error('Progress fetch failed');\n    return await response.json();\n  } catch (error) {\n    console.error(error);\n    return { completed: 0, total: 3 };\n  }\n}\n\n\nexport async function listProperties() {\n  const r = await fetch('/api/properties', { credentials: 'include' });\n  if (!r.ok) throw new Error('listProperties failed');\n  return r.json();\n}\n\nexport async function getProperty(id) {\n  const r = await fetch(`/api/properties/${id}`, { credentials: 'include' });\n  if (!r.ok) throw new Error('getProperty failed');\n  return r.json();\n}\n\nexport async function createProperty(payload) {\n  const r = await fetch('/api/properties', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    credentials: 'include',               // important for session cookie\n    body: JSON.stringify(payload),\n  });\n  if (!r.ok) {\n    const t = await r.text().catch(() => '');\n    throw new Error(`createProperty failed: ${r.status} ${t}`);\n  }\n  return r.json();\n}\n\n\nexport async function listDocuments(propertyId) {\n  const r = await fetch(`/api/properties/${propertyId}/documents`, { credentials: 'include' });\n  if (!r.ok) throw new Error('listDocuments failed');\n  return r.json();\n}\n\nexport async function presignUpload(propertyId, { filename, kind, size }) {\n  const r = await fetch(`/api/properties/${propertyId}/documents/presign`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    credentials: 'include',\n    body: JSON.stringify({ filename, kind, size }),\n  });\n  if (!r.ok) throw new Error('presignUpload failed');\n  return r.json(); // { uploadUrl, key, contentType }\n}\n\n\nexport async function completeUpload(propertyId, { key, filename, kind, sha256 }) {\n  const r = await fetch(`/api/properties/${propertyId}/documents/complete`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    credentials: 'include',\n    body: JSON.stringify({ key, filename, kind, sha256 }),\n  });\n  if (!r.ok) throw new Error('completeUpload failed');\n  return r.json();\n}\n\nexport async function getDashboardSummary() {\n  const r = await fetch('/api/dashboard/summary', { credentials: 'include' });\n  if (!r.ok) throw new Error('dashboard summary failed');\n  return r.json(); // { properties:[...], totals:{completed,total} }\n}\n\nexport async function uploadViaProxy(propertyId, file, kind = 'supporting') {\n  const form = new FormData();\n  form.append('file', file);\n  form.append('kind', kind);\n\n  const r = await fetch(`/api/properties/${propertyId}/upload`, {\n    method: 'POST',\n    credentials: 'include',   // ðŸ‘ˆ required or you'll get 401\n    body: form,\n  });\n\n  if (!r.ok) {\n    const t = await r.text().catch(() => '');\n    throw new Error(`Upload failed: ${r.status} ${t}`);\n  }\n  return r.json();\n}\n\n// (optional simple alias if your component imports uploadDocument)\nexport const uploadDocument = uploadViaProxy;\n\n\n// Get a signed URL to view/download a document\nexport async function getDocumentUrl(propertyId, docId) {\n  const r = await fetch(`/api/properties/${propertyId}/documents/${docId}/url`, {\n    credentials: 'include',\n  });\n  if (!r.ok) throw new Error('getDocumentUrl failed');\n  return r.json(); // -> { url: \"https://...\" }\n}\n\n// Delete a document\nexport async function deleteDocument(propertyId, docId) {\n  const r = await fetch(`/api/properties/${propertyId}/documents/${docId}`, {\n    method: 'DELETE',\n    credentials: 'include',\n  });\n  if (!r.ok) throw new Error('deleteDocument failed');\n  return true;\n}\n\nexport async function getMe() {\n  const r = await fetch('/api/me', { credentials: 'include' });\n  if (!r.ok) throw new Error(await r.text());\n  return r.json();\n}\n\nexport async function buildForm2(propertyId) {\n  const r = await fetch(`/api/properties/${propertyId}/form2/build`, {\n    method: 'POST',\n    credentials: 'include',\n  });\n  if (!r.ok) throw new Error(await r.text());\n  return r.json(); // { id, version, pdfKey, ... }\n}\n\nexport async function getLatestForm2(propertyId) {\n  const r = await fetch(`/api/properties/${propertyId}/form2/latest`, {\n    credentials: 'include',\n  });\n  if (!r.ok) throw new Error(await r.text());\n  return r.json();\n}\n\nexport async function buildServePack(propertyId) {\n  const r = await fetch(`/api/properties/${propertyId}/serve/build`, {\n    method: 'POST', credentials: 'include'\n  });\n  if (!r.ok) throw new Error(await r.text());\n  return r.json(); // { id, version, zipKey, ... }\n}\n\nexport async function getLatestServePack(propertyId) {\n  const r = await fetch(`/api/properties/${propertyId}/serve/latest`, {\n    credentials: 'include'\n  });\n  if (!r.ok) throw new Error(await r.text());\n  return r.json();\n}\n"],"mappings":"AAAA;AACA,OAAO,eAAeA,cAAcA,CAACC,MAAM,EAAE;EAC3C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oBAAoB,EAAE;MACjDC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,WAAW,EAAE,SAAS;MACtBC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER;MAAO,CAAC;IACjC,CAAC,CAAC;IACF,IAAI,CAACC,QAAQ,CAACQ,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;IACvD,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACE,KAAK,CAAC,CAAC;EACrB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpB,OAAO,iDAAiD;EAC1D;AACF;AAEA,OAAO,eAAeE,aAAaA,CAACC,KAAK,EAAE;EACzC,IAAI;IACF;IACA,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,0BAA0B,EAAE;MACvDG,WAAW,EAAE,SAAS;MACtBD,OAAO,EAAEa,KAAK,GAAG;QAAEC,aAAa,EAAE,UAAUD,KAAK;MAAG,CAAC,GAAG,CAAC;IAC3D,CAAC,CAAC;IACF,IAAI,CAAChB,QAAQ,CAACQ,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC1D,OAAO,MAAMT,QAAQ,CAACW,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpB,OAAO;MAAEK,SAAS,EAAE,CAAC;MAAEC,KAAK,EAAE;IAAE,CAAC;EACnC;AACF;AAGA,OAAO,eAAeC,cAAcA,CAAA,EAAG;EACrC,MAAMC,CAAC,GAAG,MAAMpB,KAAK,CAAC,iBAAiB,EAAE;IAAEG,WAAW,EAAE;EAAU,CAAC,CAAC;EACpE,IAAI,CAACiB,CAAC,CAACb,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EACnD,OAAOY,CAAC,CAACV,IAAI,CAAC,CAAC;AACjB;AAEA,OAAO,eAAeW,WAAWA,CAACC,EAAE,EAAE;EACpC,MAAMF,CAAC,GAAG,MAAMpB,KAAK,CAAC,mBAAmBsB,EAAE,EAAE,EAAE;IAAEnB,WAAW,EAAE;EAAU,CAAC,CAAC;EAC1E,IAAI,CAACiB,CAAC,CAACb,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;EAChD,OAAOY,CAAC,CAACV,IAAI,CAAC,CAAC;AACjB;AAEA,OAAO,eAAea,cAAcA,CAACC,OAAO,EAAE;EAC5C,MAAMJ,CAAC,GAAG,MAAMpB,KAAK,CAAC,iBAAiB,EAAE;IACvCC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,WAAW,EAAE,SAAS;IAAgB;IACtCC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACkB,OAAO;EAC9B,CAAC,CAAC;EACF,IAAI,CAACJ,CAAC,CAACb,EAAE,EAAE;IACT,MAAMkB,CAAC,GAAG,MAAML,CAAC,CAACM,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,MAAM,EAAE,CAAC;IACxC,MAAM,IAAInB,KAAK,CAAC,0BAA0BY,CAAC,CAACQ,MAAM,IAAIH,CAAC,EAAE,CAAC;EAC5D;EACA,OAAOL,CAAC,CAACV,IAAI,CAAC,CAAC;AACjB;AAGA,OAAO,eAAemB,aAAaA,CAACC,UAAU,EAAE;EAC9C,MAAMV,CAAC,GAAG,MAAMpB,KAAK,CAAC,mBAAmB8B,UAAU,YAAY,EAAE;IAAE3B,WAAW,EAAE;EAAU,CAAC,CAAC;EAC5F,IAAI,CAACiB,CAAC,CAACb,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;EAClD,OAAOY,CAAC,CAACV,IAAI,CAAC,CAAC;AACjB;AAEA,OAAO,eAAeqB,aAAaA,CAACD,UAAU,EAAE;EAAEE,QAAQ;EAAEC,IAAI;EAAEC;AAAK,CAAC,EAAE;EACxE,MAAMd,CAAC,GAAG,MAAMpB,KAAK,CAAC,mBAAmB8B,UAAU,oBAAoB,EAAE;IACvE7B,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,WAAW,EAAE,SAAS;IACtBC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAE0B,QAAQ;MAAEC,IAAI;MAAEC;IAAK,CAAC;EAC/C,CAAC,CAAC;EACF,IAAI,CAACd,CAAC,CAACb,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;EAClD,OAAOY,CAAC,CAACV,IAAI,CAAC,CAAC,CAAC,CAAC;AACnB;AAGA,OAAO,eAAeyB,cAAcA,CAACL,UAAU,EAAE;EAAEM,GAAG;EAAEJ,QAAQ;EAAEC,IAAI;EAAEI;AAAO,CAAC,EAAE;EAChF,MAAMjB,CAAC,GAAG,MAAMpB,KAAK,CAAC,mBAAmB8B,UAAU,qBAAqB,EAAE;IACxE7B,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,WAAW,EAAE,SAAS;IACtBC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAE8B,GAAG;MAAEJ,QAAQ;MAAEC,IAAI;MAAEI;IAAO,CAAC;EACtD,CAAC,CAAC;EACF,IAAI,CAACjB,CAAC,CAACb,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EACnD,OAAOY,CAAC,CAACV,IAAI,CAAC,CAAC;AACjB;AAEA,OAAO,eAAe4B,mBAAmBA,CAAA,EAAG;EAC1C,MAAMlB,CAAC,GAAG,MAAMpB,KAAK,CAAC,wBAAwB,EAAE;IAAEG,WAAW,EAAE;EAAU,CAAC,CAAC;EAC3E,IAAI,CAACiB,CAAC,CAACb,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EACtD,OAAOY,CAAC,CAACV,IAAI,CAAC,CAAC,CAAC,CAAC;AACnB;AAEA,OAAO,eAAe6B,cAAcA,CAACT,UAAU,EAAEU,IAAI,EAAEP,IAAI,GAAG,YAAY,EAAE;EAC1E,MAAMQ,IAAI,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC3BD,IAAI,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;EACzBC,IAAI,CAACE,MAAM,CAAC,MAAM,EAAEV,IAAI,CAAC;EAEzB,MAAMb,CAAC,GAAG,MAAMpB,KAAK,CAAC,mBAAmB8B,UAAU,SAAS,EAAE;IAC5D7B,MAAM,EAAE,MAAM;IACdE,WAAW,EAAE,SAAS;IAAI;IAC1BC,IAAI,EAAEqC;EACR,CAAC,CAAC;EAEF,IAAI,CAACrB,CAAC,CAACb,EAAE,EAAE;IACT,MAAMkB,CAAC,GAAG,MAAML,CAAC,CAACM,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,MAAM,EAAE,CAAC;IACxC,MAAM,IAAInB,KAAK,CAAC,kBAAkBY,CAAC,CAACQ,MAAM,IAAIH,CAAC,EAAE,CAAC;EACpD;EACA,OAAOL,CAAC,CAACV,IAAI,CAAC,CAAC;AACjB;;AAEA;AACA,OAAO,MAAMkC,cAAc,GAAGL,cAAc;;AAG5C;AACA,OAAO,eAAeM,cAAcA,CAACf,UAAU,EAAEgB,KAAK,EAAE;EACtD,MAAM1B,CAAC,GAAG,MAAMpB,KAAK,CAAC,mBAAmB8B,UAAU,cAAcgB,KAAK,MAAM,EAAE;IAC5E3C,WAAW,EAAE;EACf,CAAC,CAAC;EACF,IAAI,CAACiB,CAAC,CAACb,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EACnD,OAAOY,CAAC,CAACV,IAAI,CAAC,CAAC,CAAC,CAAC;AACnB;;AAEA;AACA,OAAO,eAAeqC,cAAcA,CAACjB,UAAU,EAAEgB,KAAK,EAAE;EACtD,MAAM1B,CAAC,GAAG,MAAMpB,KAAK,CAAC,mBAAmB8B,UAAU,cAAcgB,KAAK,EAAE,EAAE;IACxE7C,MAAM,EAAE,QAAQ;IAChBE,WAAW,EAAE;EACf,CAAC,CAAC;EACF,IAAI,CAACiB,CAAC,CAACb,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EACnD,OAAO,IAAI;AACb;AAEA,OAAO,eAAewC,KAAKA,CAAA,EAAG;EAC5B,MAAM5B,CAAC,GAAG,MAAMpB,KAAK,CAAC,SAAS,EAAE;IAAEG,WAAW,EAAE;EAAU,CAAC,CAAC;EAC5D,IAAI,CAACiB,CAAC,CAACb,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,MAAMY,CAAC,CAACM,IAAI,CAAC,CAAC,CAAC;EAC1C,OAAON,CAAC,CAACV,IAAI,CAAC,CAAC;AACjB;AAEA,OAAO,eAAeuC,UAAUA,CAACnB,UAAU,EAAE;EAC3C,MAAMV,CAAC,GAAG,MAAMpB,KAAK,CAAC,mBAAmB8B,UAAU,cAAc,EAAE;IACjE7B,MAAM,EAAE,MAAM;IACdE,WAAW,EAAE;EACf,CAAC,CAAC;EACF,IAAI,CAACiB,CAAC,CAACb,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,MAAMY,CAAC,CAACM,IAAI,CAAC,CAAC,CAAC;EAC1C,OAAON,CAAC,CAACV,IAAI,CAAC,CAAC,CAAC,CAAC;AACnB;AAEA,OAAO,eAAewC,cAAcA,CAACpB,UAAU,EAAE;EAC/C,MAAMV,CAAC,GAAG,MAAMpB,KAAK,CAAC,mBAAmB8B,UAAU,eAAe,EAAE;IAClE3B,WAAW,EAAE;EACf,CAAC,CAAC;EACF,IAAI,CAACiB,CAAC,CAACb,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,MAAMY,CAAC,CAACM,IAAI,CAAC,CAAC,CAAC;EAC1C,OAAON,CAAC,CAACV,IAAI,CAAC,CAAC;AACjB;AAEA,OAAO,eAAeyC,cAAcA,CAACrB,UAAU,EAAE;EAC/C,MAAMV,CAAC,GAAG,MAAMpB,KAAK,CAAC,mBAAmB8B,UAAU,cAAc,EAAE;IACjE7B,MAAM,EAAE,MAAM;IAAEE,WAAW,EAAE;EAC/B,CAAC,CAAC;EACF,IAAI,CAACiB,CAAC,CAACb,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,MAAMY,CAAC,CAACM,IAAI,CAAC,CAAC,CAAC;EAC1C,OAAON,CAAC,CAACV,IAAI,CAAC,CAAC,CAAC,CAAC;AACnB;AAEA,OAAO,eAAe0C,kBAAkBA,CAACtB,UAAU,EAAE;EACnD,MAAMV,CAAC,GAAG,MAAMpB,KAAK,CAAC,mBAAmB8B,UAAU,eAAe,EAAE;IAClE3B,WAAW,EAAE;EACf,CAAC,CAAC;EACF,IAAI,CAACiB,CAAC,CAACb,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,MAAMY,CAAC,CAACM,IAAI,CAAC,CAAC,CAAC;EAC1C,OAAON,CAAC,CAACV,IAAI,CAAC,CAAC;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}